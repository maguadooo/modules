{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "applicationGatewayName": {
            "type": "string",
            "metadata": {
                "description": "Required. Name of the Application Gateway."
            }
        },
        "authenticationCertificates": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Authentication certificates of the application gateway resource."
            }
        },
        "backendPools": {
            "type": "array",
            "metadata": {
                "description": "Required. Backend address pool of the application gateway resource."
            }
        },
        "customHealthProbes": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Custom health probes configuration to monitor the availability of the backend resources."
            }
        },
        "endpointRegistration": {
            "type": "array",
            "metadata": {
                "description": "Required. Endpoint information detailing backendPools, frontendListeners, customErrorConfigurations, HealthProbes and routingRules."
            }
        },
        "diagnosticSettings": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Set the storage account, workspace or eventhub to send metrics or logs."
            }
        },
        "enableHttp2": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Whether HTTP2 is enabled on the application gateway resource."
            }
        },
        "enableRequestBuffering": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Enable request buffering."
            }
        },
        "enableResponseBuffering": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Enable response buffering."
            }
        },
        "firewallPolicyId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The resource Id of an associated firewall policy."
            }
        },
        "userAssignedIdentities": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Optional. The User Assigned Identities to assign to the resource. System Assigned Identities are not compatible with Application Gateway."
            }
        },
        "loadDistributionPolicies": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Load distribution policies of the application gateway resource."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Switch to lock the application gateway from deletion."
            }
        },
        "privateIPaddress": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Optional. Properties of the private IP address used by the application gateway."
            }
        },
        "privateLinkConfigurations": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. PrivateLink configurations on application gateway."
            }
        },
        "publicIPaddress": {
            "type": "string",
            "metadata": {
                "description": "Required. Properties of the public IP address used by the application gateway."
            }
        },
        "resourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Optional. Name of the resource group."
            }
        },
        "rewriteRuleSets": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Rewrite rules for the application gateway resource."
            }
        },
        "roleAssignments": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
        },
        "scalingProperties": {
            "type": "object",
            "defaultValue": {
                "autoscale": true,
                "minCapacity": 0,
                "maxCapacity": 10
            },
            "metadata": {
                "description": "Optional. If autoscale is true, provide min and max capacity. If autoscale is false, provide a fixed instanceCount"
            }
        },
        "sslPolicy": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Application Gateway Ssl Policy."
            }
        },
        "subnetResourceId": {
            "type": "string",
            "metadata": {
                "description": "Required. The name of Gateway Subnet Name where the Application Gateway will be deployed."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Optional. Tags of the resource."
            }
        },
        "trustedClientCertificates": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Trusted client certificates of the application gateway resource."
            }
        },
        "trustedRootCertificates": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Trusted Root certificates of the application gateway resource."
            }
        },
        "webApplicationFirewall": {
            "type": "object",
            "defaultValue": {
                "enabled": false
            },
            "metadata": {
                "description": "Optional. Configuration of the Web Application Firewall."
            }
        }
    },
    "functions": [
        {
            "namespace": "udf",
            "members": {
                "cleanArray": { // removes null and duplicated elements
                    "parameters": [
                        {
                            "name": "inputArray",
                            "type": "array"
                        }
                    ],
                    "output": {
                        "value": "[skip(concat(union(createArray(createObject()),parameters('inputArray'),parameters('inputArray'))),1)]",
                        "type": "array"
                    }
                },
                "removeInnerArrays": {
                    "parameters": [
                        {
                            "name": "inputArray",
                            "type": "array"
                        }
                    ],
                    "output": {
                        "type": "array",
                        "value": "[json(
                                            replace(replace(replace(string(parameters('inputArray')),
                                                '[[','['),
                                                ']]',']'),
                                                '],[',',')
                                        )]"
                    }
                }
            }
        }
    ],
    "variables": {
        "copy": [
            {
                "name": "setBackendAddressPools",
                "count": "[length(parameters('backendPools'))]",
                "input": {
                    "name": "[parameters('backendPools')[copyIndex('setBackendAddressPools')].name]",
                    "properties": {
                        "backendAddresses": "[parameters('backendPools')[copyIndex('setBackendAddressPools')].backendAddresses]"
                    }
                }
            },
            {
                "name": "setFrontEndPorts",
                "count": "[length(parameters('endpointRegistration'))]",
                "input": {
                    "name": "[concat('port',parameters('endpointRegistration')[copyIndex('setFrontEndPorts')].frontendListener.frontendPort)]",
                    "properties": {
                        "port": "[parameters('endpointRegistration')[copyIndex('setFrontEndPorts')].frontendListener.frontendPort]"
                    }
                }
            },
            {
                "name": "mainHttpSettings",
                "count": "[length(parameters('endpointRegistration'))]",
                "input": "[if(
                    contains(parameters('endpointRegistration')[copyindex('mainHttpSettings')],'routingRule'),
                    if(
                        contains(parameters('endpointRegistration')[copyindex('mainHttpSettings')].routingRule.httpSettings,'properties'),
                        parameters('endpointRegistration')[copyindex('mainHttpSettings')].routingRule.httpSettings,
                        createObject()
                    ),
                    createObject()
                )]"
            },
            {
                "name": "sslCertificates",
                "count": "[length(parameters('endpointRegistration'))]",
                "input": "[if(
                    contains(parameters('endpointRegistration')[copyIndex('sslCertificates')].frontendListener,'sslCertificate'),
                    parameters('endpointRegistration')[copyIndex('sslCertificates')].frontendListener.sslCertificate,
                    createObject()
                )]"
            }
        ],
        "setSSLCertificates": "[udf.cleanArray(variables('sslCertificates'))]"
    },
    "resources": [
        {
            "name": "nestedDeployment",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                    "endpointRegistration": {
                        "value": "[parameters('endpointRegistration')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "endpointRegistration": {
                            "type": "array"
                        }
                    },
                    "variables": {},
                    "resources": [
                        {
                            "name": "[concat('loopDeploy-',copyIndex())]",
                            "type": "Microsoft.Resources/deployments",
                            "apiVersion": "2021-04-01",
                            "copy": {
                                "name": "endpointregcopy",
                                "count": "[length(parameters('endpointRegistration'))]"
                            },
                            "properties": {
                                "mode": "Incremental",
                                "parameters": {
                                    "endpointRegistration": {
                                        "value": "[parameters('endpointRegistration')[copyIndex('endpointregcopy')]]"
                                    }
                                },
                                "expressionEvaluationOptions": {
                                    "scope": "Inner"
                                },
                                "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "parameters": {
                                        "resourceGroupName": {
                                            "type": "string",
                                            "defaultValue": "resourceGroupName",
                                            "metadata": {
                                                "description": "description"
                                            }
                                        },
                                        "applicationGatewayName": {
                                            "type": "string",
                                            "defaultValue": "applicationGatewayName",
                                            "metadata": {
                                                "description": "description"
                                            }
                                        },
                                        "endpointRegistration": {
                                            "type": "object"
                                        }
                                    },
                                    "variables": {
                                        "applicationGatewayId": "[concat(subscription().id,'/resourceGroups/',parameters('resourceGroupName'),'/providers/Microsoft.Network/applicationGateways/',parameters('applicationGatewayName'))]",
                                        "pathBasedRoutingLength": "[if(
                                            contains(parameters('endpointRegistration'),'pathBasedRouting'),
                                            length(parameters('endpointRegistration').pathBasedRouting),
                                            0
                                        )]",
                                        "copy": [
                                            {
                                                "name": "pathRoutingHttpSettings",
                                                "count": "[variables('pathBasedRoutingLength')]",
                                                "input": "[if(
                                                    equals(toLower(parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingHttpSettings')].type),'backendpool') ,
                                                    if(
                                                        contains(parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingHttpSettings')].httpSettings,'properties'),
                                                        parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingHttpSettings')].httpSettings,
                                                        createObject()
                                                    ),
                                                    createObject()
                                                )]"
                                            },
                                            {
                                                "name": "pathRoutingRedirectionRules",
                                                "count": "[variables('pathBasedRoutingLength')]",
                                                "input": "[if(
                                                    equals(toLower(parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')].type),'redirection'),
                                                    createObject(
                                                        'name', concat(parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')].name),
                                                        'properties', createObject(
                                                            'includePath', if(contains(parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')],'includePath'),parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')].includePath,json('null')),
                                                            'includeQueryString', if(contains(parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')],'includeQueryString'),parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')].includeQueryString,json('null')),
                                                            'redirectType', if(contains(parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')],'redirectType'),parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')].redirectType,json('null')),
                                                            'targetUrl', if(contains(parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')],'targetUrl'),parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')].targetUrl,json('null')),
                                                            'targetListener', if(
                                                                contains(parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')],'targetListener'),
                                                                createObject('id',concat(variables('applicationGatewayId'),'/httpListeners/',parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRoutingRedirectionRules')].targetListener)),
                                                                createObject()
                                                            )
                                                        )
                                                    ),
                                                    createObject()
                                                )]"
                                            },
                                            {
                                                "name": "pathRules",
                                                "count": "[variables('pathBasedRoutingLength')]",
                                                "input": "[
                                                    if(equals(toLower(parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRules')].type),'backendpool'),
                                                    createObject(
                                                        'name',parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRules')].name,
                                                        'properties',createObject(
                                                            'backendAddressPool',createObject('id',concat(variables('applicationGatewayId'),'/backendAddressPools/',parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRules')].backendPool)),
                                                            'backendHttpSettings',createObject('id',concat(variables('applicationGatewayId'),'/backendHttpSettingsCollection/',parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRules')].httpSettings.name)),
                                                            'paths',parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRules')].paths
                                                        )
                                                    ),
                                                    createObject(
                                                        'name',parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRules')].name,
                                                        'properties',createObject(
                                                            'redirectConfiguration',createObject('id',concat(variables('applicationGatewayId'),'/redirectConfigurations/',parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRules')].name)),
                                                            'paths',parameters('endpointRegistration').pathBasedRouting[copyIndex('pathRules')].paths
                                                        )
                                                    )    
                                                )]"
                                            }
                                        ],
                                        "urlPathMaps": "[if(
                                            contains(parameters('endpointRegistration'),'pathBasedRouting'),
                                            createArray(
                                                createObject(
                                                    'name', if(
                                                        contains(parameters('endpointRegistration'),'routingRule'),
                                                        concat(parameters('endpointRegistration').routingRule.name),
                                                        concat(parameters('endpointRegistration').redirectionRule.name)
                                                    ),
                                                    'properties', createObject(
                                                        'pathRules', variables('pathRules'),
                                                        'defaultBackendAddressPool', if(
                                                            contains(parameters('endpointRegistration'),'routingRule'),
                                                            concat(variables('applicationGatewayId'),'/backendAddressPools/',parameters('endpointRegistration').routingRule.backendPool),
                                                            json('null')
                                                        ),
                                                        'defaultBackendHttpSettings', if(
                                                            contains(parameters('endpointRegistration'),'routingRule'),
                                                            concat(variables('applicationGatewayId'),'/backendHttpSettingsCollection/',parameters('endpointRegistration').routingRule.httpSettings.name),
                                                            json('null')
                                                        ),
                                                        'defaultRedirectConfiguration', if(
                                                            contains(parameters('endpointRegistration'),'redirectionRule'),
                                                            createObject('id',concat(variables('applicationGatewayId'),'/redirectConfigurations/',parameters('endpointRegistration').redirectionRule.name)),
                                                            json('null')
                                                        )
                                                    )
                                                )
                                            ),
                                            createArray()
                                        )]"
                                    },
                                    "resources": [],
                                    "outputs": {
                                        "pathRoutingHttpSettings": {
                                            "type": "array",
                                            "value": "[variables('pathRoutingHttpSettings')]"
                                        },
                                        "urlPathMaps": {
                                            "type": "array",
                                            "value": "[variables('urlPathMaps')]"
                                        }
                                    }
                                }
                            }
                        }
                    ],
                    "outputs": {
                        "pathRoutingHttpSettings": {
                            "type": "array",
                            "copy": {
                                "count": "[length(parameters('endpointRegistration'))]",
                                "input": "[reference(concat('loopDeploy-',copyIndex())).outputs.pathRoutingHttpSettings.value]"
                            }
                        },
                        "urlPathMaps": {
                            "type": "array",
                            "copy": {
                                "count": "[length(parameters('endpointRegistration'))]",
                                "input": "[reference(concat('loopDeploy-',copyIndex())).outputs.urlPathMaps.value]"
                            }
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
        "backendAddressPools": {
            "type": "array",
            "value": "[variables('setBackendAddressPools')]"
        },
        "frontEndPorts": {
            "type": "array",
            "value": "[variables('setFrontEndPorts')]"
        },
        "httpSettings": {
            "type": "array",
            "value": "[udf.cleanArray(concat(variables('mainHttpSettings'),reference('nestedDeployment').outputs.pathRoutingHttpSettings.value))]"
        },
        "SSLCertificates": {
            "type": "array",
            "value": "[variables('setSSLCertificates')]"
        },
        "urlPathMaps": {
            "type": "array",
            "value": "[udf.removeInnerArrays(reference('nestedDeployment').outputs.urlPathMaps.value)]"
        }
    }
}